# -*- coding: utf-8 -*-
"""Unidad 4: IOLA Python para finanzas - Ejercicios Dataframes, investpy, funciones y graficos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yr52Yd6H8f4kcjyncW0_vaHCAwM_HyR3
"""

pip install yfinance

import yfinance as yf

yf.download("BBAR.BA")

pip install investpy

import investpy



df = investpy.get_stock_historical_data(stock='AAPL',
                                        country='United States',
                                        from_date='01/01/2010',
                                        to_date='01/01/2020')
df

import yfinance as yf

yf.download("ggal")

get_historical_by_source("ggal", source="yfinance",comienzo="2021-01-01")

fecha = '01/01/2010'.split("/")

estandar =  "2010-01-01"


particular = '01/01/2010'

estandar[::-1]

"""#PArto de una fecha en formato iso y la tengo que llegar a este fomato dd/mm/yyyy

fecha_iso = "2021-09-10"
"""

fecha_iso = "2021-09-10"

fecha_iso.split("-")[::-1]

def convertir_fecha_iso_a_particular(fecha):
  return "/".join(fecha.split("-")[::-1])

convertir_fecha_iso_a_particular("2021-10-09")

def get_historical_by_source(activo, source="yfinance", comienzo=None, fin=None):
  
  """ 
  ESta funcion se encarga de buscar datos historicos de mercado, 
  
  """
  data = None 

  if(source == "yfinance"):
    data = yf.download(activo,start=comienzo, end=fin)
  else:
    if(not fin):
      ahora = dt.now()
      fin = ahora.strftime("%d/%m/%Y")
    if(not comienzo):
      comienzo = "01/01/1980"

    data = investpy.get_stock_historical_data(stock=activo,
                                        country='United States',
                                        from_date=comienzo,
                                        to_date=fin)


  return data

investpy.get_stock_historical_data(stock="AAPL",
                                        country='United States',
                                        from_date="01/01/1980",
                                        to_date="10/09/2021")

from datetime import datetime  as dt
hoy = dt.now()
hasta = hoy.strftime("%d/%m/%Y")
hasta

dt.now()

get_historical_by_source("ggal", source= "yfinance")



"""##Â Ejercicio con dataframes

Descargar dos activos de yfinance en dos datas diferentes 

- hacer una concatenacion de los dataframes
- Cambiar los indices
- Eliminar columnas
- con loc[] obtener un subconjunto de la matriz (no importa cual, la idea es hacer el filtrado) 
- Con iloc traer todos menos el primero
- con iloc traer todos menos el ultimo
"""

aapl= yf.download("aapl", auto_adjust=True)["Close"]
ypfd = yf.download("ypfd.ba", auto_adjust=True)["Close"]

aapl

import pandas as pd
matriz = pd.concat([aapl, ypfd], axis=1)

matriz.columns = ["aapl", "ypfd"]

matriz.fillna()

matriz = matriz.reset_index()

matriz

matriz.set_index(keys="ypfd")

matriz.set_index("")

data = yf.download(["ggal.ba","ypfd.ba"])

data

matriz.drop(["aapl"], axis = 1)



"""Obtener el historico de precios para Microsoft y de el traer datos desde 10 de mayo de 2013 hasta el 20 de octubre de 2018, obtener el maximo y minimo relativo"""

msft = yf.download("MSFT", start="2013-05-10" , end ="2018-10-20", auto_adjust=True)

ordenado = msft.sort_values(by="Close")
ordenado.round(3).iloc[-1] #maximo
ordenado.round(3).iloc[0] #minimo
ordenado.round(3).iloc[-1].iloc[4]
ordenado

# otra forma

msft1 = yf.download("msft", auto_adjust= True)
filtrado = msft1["2013-05-10":"2018-10-20"].copy()
filtrado["min"] = filtrado.Close.cummin()
filtrado["max"] = filtrado.Close.cummax()
filtrado.loc[filtrado["Close"].idxmin()]
filtrado.loc[filtrado["Close"].idxmax()]

filtrado.loc["2013-09-06"]

"""## Ejercicio traer las ruedas cuyo volumen sea mayor a 868600"""

mayorA = msft1[ (msft1["Volume"] > 36027600)  &  (msft1["Volume"] < 56027600) ]

mayorA

data = yf.download("ggal", start="2021-01-01", auto_adjust=True)

data.Close.plot(kind="hist")

data.Close.plot()



"""imprimir la serie de precios para un activo que prefieran desde el 2018 a la actualidad, el activo debe tener precio"""

data = yf.download("ggal", auto_adjust=True)
data.loc[(data.index >= "2018")].Close.plot()

pip install plotly

data

import plotly.graph_objects as go

import pandas as pd
from datetime import datetime

df = data.loc[(data.index >= "2000")].copy()
df = df.reset_index()

fig = go.Figure(data=[go.Candlestick(x=df['Date'],
                open=df['Open'],
                high=df['High'],
                low=df['Low'],
                close=df['Close'])])

fig.show()

