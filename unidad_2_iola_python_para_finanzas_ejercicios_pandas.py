# -*- coding: utf-8 -*-
"""Unidad 2: IOLA Python para finanzas - Ejercicios Pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pK_KL7GpESZB1KMCne72l8RGU4HrJQdo

# Guia de ejercicios basicos dataframes
**Profesor**: Ignacio Guardines
<br>
**telegram | twitter** :@nacho_java

# Ejercicio
Configurando el formato del output
- mostrar minimo 10 filas
- maximo 10 filas
- maximo 30 columnas
"""

import yfinance as yf

data = yf.download("AAPL")

pd.options.display.min_rows = 15
pd.options.display.max_rows = 20
pd.options.display.max_columns = 30
# precisoin pd.options.display.precision = 2

data.round(2).loc["1980-12-12":"1980-12-22"]

"""# Ejercicio
La agencia de calificación de riesgo estadounidense en servicios financieros Standard & Poor's publica informes sobre calificacion (riesgo) crediticio de emisores de deuda.
 A continuación se presentan los valores de referencia de dichas posibles calificaciones

Modelar la estructura de dato que represente dicha informacion.

Clasificación de la deuda soberana de los distintos países del mundo según Standard & Poor's (Febrero de 2018)
AAA	AA	A	BBB	BB	B	CCC	CC/D
Los estándares utilizados para determinar la solvencia y estabilidad son:

#### Para operaciones a largo plazo
###Inversiones estables
- AAA: La más alta calificación de una compañía, fiable y estable.
- AA: Compañías de gran calidad, muy estables y de bajo riesgo.
- A: Compañías a las que la situación económica puede afectar a la financiación.
- BBB: Adecuada capacidad de pago, pero sujeto a cambios económicos adversos
Inversiones de riesgo o especulativas
- BB: Muy propensas a los cambios económicos.
- B: La situación financiera sufre variaciones notables.
- CCC: Vulnerable en el momento y muy dependiente de la situación económica
- CC: Muy vulnerable, alto nivel especulativo.
- C: extremadamente vulnerable con riesgo económicos.
Para operaciones a corto plazo
- A-1: El obligado tiene plena capacidad para responder del débito.
- A-2: El obligado tiene capacidad para responder del débito aunque el bono es susceptible de variar frente a situaciones económicas adversas.
- A-3: Las situaciones económicas adversas pueden condicionar la capacidad de respuesta del obligado.
- B: Importante nivel especulativo.
- C: Muy especulativo y de dudosa capacidad de respuesta del obligado.
- D: De imposible cobro.



"""





### posible solucion 
calificaciones = {
    "AAA": "La más alta calificación de una compañía, fiable y estable.",
    "AA": "Compañías de gran calidad, muy estables y de bajo riesgo."

}

"""# Ejercicio
Obtener marketdata por medio de yfinance:
- Acceder a la primer fila
- Acceder a la ultima fila
- Acceder precio de apertura de la primer fila
- Acceder al precio de cierre de la ultima fila

"""





# posible solucion
data = yf.download("ggal.ba")

data.loc[::].iloc[0].Open
data.loc[::-1].iloc[0].Close
data.head(1)
data.tail(1)
data.iloc[0]
data.iloc[-1]

"""#Ejercicio 

Crear una columna nueva denominada promedio donde se calcule y guarde el valor medio entre el Low y el High de cada dia

"""





# posible solucion

data["promedio"] = (data.Low + data.High) / 2 
data

"""# Ejercicio 
Crear una columna nueva denominada variacion donde se calcule y guarde el porcentaje de variacion entre el dia actual y el anterior respecto del Adj Close
"""





#Posible solucion
data["variacion"] = data["Adj Close"].pct_change()
data

"""# Ejercicio
por medio de yfinance:
- obtener datos historicos de activo GARMIN  diarios del ultimo año YTD 
- Guardar ese dataframe como csv
- Guardar ese dataframe como xls
- Mostrar la fecha con mayor volumen operado, guardar el volumen maximo
- Mostrar la fecha con el menor volumen operado, guardar el volumen minimo 
- Mostrar la fecha con el precio maximo, guardar el precio maximo
- Mostrar la fecha con el precio minimo, guardar el precio minimo

"""











#posible solucion

!pip install yfinance
import yfinance as yf

data = yf.download("GRMN",start="2021-01-01",end="2021-04-02")
data

# primero necesito saber con que columnas cuento.
data.columns

# dado el requerimiento, puedo ordenar por volumen descendiente entonces
# en la posicion 0 voy a  tener el mayor volumen y como voy a tener la row tambien 
# la fecha, en un caso guardo en una variable y en el otro simplemente muestro por 
# pantalla

max_volumen_row = data.sort_values(by="Volume", ascending=False).iloc[0]
print(f"La fecha con mayor volumen fué, {max_volumen_row.name.date()}")
max_volumen = max_volumen_row.Volume
print(f"el volumen operado fue de {max_volumen}")

max_volumen

"""# Ejercicio 
Desde colab importar el archivo con AAPL.csv
"""

from google.colab import files
import pandas as pd
import io


uploaded = files.upload()


df = pd.read_csv(io.StringIO(uploaded['AAPL.csv'].decode('utf-8')))
df

data.columns

aperturas = data.open 
aperturas

data['open']

"""# Ejercicio

Obtener datos de algun activo desde yfinance luego obtener una sub matriz con 5 filas y 3 columnas.
"""









aapl

data.loc[ 0:5 , ['open','close','volume'] ]



"""# Ejercicio
Obtener de yfinance informacion de apple, crear una columna que determine si se debe comprar o no, para ello evalua
si el precio de apertura es menor que el precio de cierre, de ser asi debe indicar compra

"""

import numpy as np

aapl = yf.download("AAPL")

aapl["compra"] = np.where( aapl.Open < aapl.Close, True, False)



data = pd.read_excel('AAPL.xlsx', index_col='high', usecols=[0,2,3])
data











"""# Ejercicio:

Leer el archivo de precios de AAPL y devolver el dataFrame que tenga:

    - Solo las columnas Open y Close 
    - Que tenga como indice el timestamp
    - Que este ordenado por fechas
    - que devuelva solo los ultimos 10 valores
"""





"""Si queremos que el número de filas o columnas a mostrar sea ilimitado, es decir que muestre siempre todo, lo configuramos como <b>None</b>"""

pd.options.display.max_columns= None
pd.options.display.max_rows= 8
data

"""#Ejercicio
con el metodo round() cambiar en varias celdas diferente la precision de los decimales
"""



data = data.round(1)
data







"""# Ejercicio

Obtener informacion del dataframe por medio de 
- info() 
- shape()
- columns
- index
- dtypes
"""







#Ej
data.dtypes

"""Si simplemente queremos obtener la cantidad de filas y columnas de la tabla podemos usar el atributo shape"""





"""# Ejercicio
Dado un dataframe con un indice no numerico se pide utilizar y probar la funcion reset_index, 
 Reseteo de indice
"""







data = yf.download("aapl")

data.reset_index()

data



"""# Ejercicio
Leer un archivo excel (puede ser de datos descargado de yfinance y exportado a excel)
- settear el indice en timestamp
- calcular el precio medio de la vela, como el promedio del open, close, low y high
"""







data = pd.read_excel('AAPL.xlsx', sheet_name='Hoja1')
data.set_index('timestamp', inplace=True)

data['precio_medio_vela'] = (data.open + data.close + data.low + data.high) / 4
data.tail(10)









"""# Ejercicio

 leer el archivo de precios de AAPL.xlsx (obtenido de yfinance y exportado con to_excel():

- crearle una columna 'px' que muestre el volumen diario en millones de usd
- en lugar de nominales, usando el precio medio de cada rueda
- calcular el precio medio de la rueda como el promedio OHLC
- al final guardar el excel como AAPL_2.xlsx con la columna agregada
- reiniciar el kernel y volver a levantar el df abriendo el archivo AAPL_2.xlsx

"""

data = pd.read_excel('AAPL.xlsx', sheet_name='Hoja1', index_col='timestamp')
data.sort_index(inplace=True)
data



"""Esto se los dejo para los que quieran investigar y jugar un poco, obviamente nadie en su sano juicio obtendría precios de esta forma, ya vamos a ver APIs y esas cosas, peeeero, esta bueno para practicar

#Ejercicio
Analizar que es lo que hace el parametro thousands en la funcion read_html
por otro lado acceder a la url desde un navegador web y comparar lo que devuelve python de lo que se ve en el navegador.
"""

url = 'https://www.invertironline.com/mercado/cotizaciones/argentina/acciones/panel-general'
df = pd.read_html(url, thousands='.')
df[0]

"""#Ejercicio

De la tabla obtenida del ejercicio anterior obtener solo el valor del ticker quitando la descripcion.
Esto es quedarse unicamente con los 3 o 4 caracteres correspondiente al ticker, crear una columna con el mismo nombre
"""

iol = df[0]
iol['ticker'] = iol['Símbolo'].str.split(' ').str[0]

iol



tablas = pd.read_html("https://www.spglobal.com/spdji/en/indices/equity/sp-500/#overview")

tabla = tablas[0]
tabla.set_index("Ticker", inplace = True)

tabla



"""Algunos cuesta un poco mas trabajarlos.. ponele"""

url = 'http://www.rava.com/precios/panel.php?m=LID'
df = pd.read_html(url, thousands='.')[9]
df.columns = list(df.loc[0,:])
df.drop(0,axis=0)

"""Aca va para las opciones y los cedears con el agregado del atributo "header" y pasando a datos numericos los campos"""

import pandas as pd
url = 'http://www.rava.com/precios/panel.php?m=OPC'
df = pd.read_html(url, thousands='.',header=0)[8]
df = df.replace(',','.',regex=True)
df[df.columns[1:7]] = df[df.columns[1:7]].apply(pd. to_numeric, errors='coerce').round(2)
df[df.columns[8:10]] = df[df.columns[8:10]].apply(pd. to_numeric, errors='coerce')
df

import pandas as pd
url = 'http://www.rava.com/precios/panel.php?m=CED'
df = pd.read_html(url, thousands='.',header=0)[8]
df = df.replace(',','.',regex=True)
df[df.columns[1:7]] = df[df.columns[1:7]].apply(pd. to_numeric, errors='coerce').round(2)
df[df.columns[8:10]] = df[df.columns[8:10]].apply(pd. to_numeric, errors='coerce')
df

df['Especie'] = df.Especie.str.replace('CEDEA','')

df







"""# Ejercicio
Obtener informacion de algun activo, crear una columna nueva que calcule la SMA ( standar Moving Average) de 3 ruedas.

Utilizar el metodo rolling de pandas
"""





import yfinance as yf
data = yf.download("AUSO.BA")

data["SMA3"] = data["Adj Close"].rolling(3).mean().dropna()

fast = 3
slow = 9

data["sma3"] = data.Close.rolling(fast).mean()
data["sma9"] = data.Close.rolling(slow).mean()

data['Cruce'] = np.where( data["sma3"]>
                     data["sma9"], True, False)

data



"""#Ejercicio
- Traer por medio de read_html de pandas los 500 activos listados en el S&P500
- obtener solo los tickers
- llamar a yfinance con la lista intervalo 1 dia, comenzando el 2019-01-01
 

"""

sp500 = pd.read_html('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')[0]
sp500_tickers  = list(sp500.Symbol)
sp500_tickers.remove('BRK.B')
sp500_tickers.remove('BF.B')

data = yf.download(sp500_tickers, start='2019-01-01', interval='1d', end=None, auto_adjust=True)

