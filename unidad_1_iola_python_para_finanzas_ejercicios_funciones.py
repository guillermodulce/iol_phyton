# -*- coding: utf-8 -*-
"""Unidad 1: IOLA Python para finanzas - Ejercicios Funciones.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LhfcVN73Wl13i474-C54rQsAVz2F4WLr
"""



"""## Ejercicio 1)
Se requiere una función que reciba 3 valores numericos y devuelva el mayor de ellos
elMayorDeTres(a,b,c)

probar la función con los siguientes argumentos
- con 1,2,3 -> deberá devolver 3
- 3,3, 2 -> deberá devolver 3
- 1, 0.1, 100 deberá devolver 100

"""











"""#### Posible Solucion"""

#Opción mas facil
def elMayorDeTres(a,b,c):
  lista = [a,b,c]
  lista.sort(reverse=True)
  return lista[0]

elMayorDeTres(1,2,4)

"""Algoritmo .

1.- recibir tres números diferentes.

2.- Comparar el primero con el segundo.

3.- Al mayor de los anteriores, compararlo con el tercero. El número más grande es el mayor de los tres.

4.- devolver el resultado obtenido

FIN


"""

#Opcion v2
def elMayorDeTresV2(a,b,c):
  if a >= b:
    if(a >= c):
      return a
    else:
       return c 
  elif (b >= c):
    return b 
  else:
     return c

elMayorDeTresV2(1,2,3)

elMayorDeTresV2(3,3,2)

elMayorDeTresV2(1,2,3)

"""## Ejercicio 2)
Definir e implementar una función llamada debo_comprar que recibe 3 parametros que representan un valor puntual de la sma3, sma9, sma21 y un 4to opcional que es un booleano volumenEnAumento.
 Debe devolver True cuando la sma3 es mayor a la sma9 y sma21 y ademas volumenEnAumento esta en True, es un valor opcional y por defecto esta en False, todos los demas casos es Falso 


"""











"""#### Posible Solucion"""

def deboComprar(sma3, sma9, sma18, volumenEnAumento=False):
  return sma3 > sma9 and sma3 > sma18 and volumenEnAumento

deboComprar(10, 9 ,9, volumenEnAumento=True)

deboComprar(10, 9 ,9, volumenEnAumento=False )

"""## Ejercicio 3)
Definir una funcion llamada costosComisionyDerechos, recibe precio unitario, cantidad y porcentaje de comision, este ultimo expresado numericamente como valor porcentual, devuelve dos valores, el primero el costo de comision y el segundo el derecho de mercado. (por brevedad se simplifica el iva y no se incluye)
"""











"""#### Posible Solucion"""

def costosComisionyDerechos(precio, cantidad, porcentajeComision, porcentajeDerechoMercado=0):
  comision =   precio * cantidad *  porcentajeComision/100
  derechoMercado = (precio * cantidad + comision) * porcentajeDerechoMercado / 100
  return comision, derechoMercado

costosComisionyDerechos(100, 10, 0.3, 0.08)



"""#### Ejercicio 4)
Definir e implementar una funcion de nombre calcularTakeProfit, que recibe un numero que representa la posición y un numero que representa el porcentaje considerado para la toma de ganancias.
"""











"""#### Posible Solucion"""

def calcularTakeProfit(posicion, porcentaje):
  return posicion * (1 + porcentaje)

calcularTakeProfit(1000, 0.05)



"""## Ejercicio 5)
Definir e implementar una funcion que dado un precio unitario, una cantidad, una comision, un porcentaje de takeprofit y otro de stoploss me devuelva calculado todos esos datos.

Algoritmo
1.- Inicio
 
2.- calcular y asignar a una variable el valor de la comision

3.- calcular y asignar a una variable el valor del takeprofit

4.- calcular y asignar a una variable el valor del stop loss

5.-  retornar las variables separadas por coma.

FIN
"""











def volumenPrevioMenorAlActual(volAyer, volHoy):
  return volAyer < volHoy

volumenPrevioMenorAlActual(100, 200)

